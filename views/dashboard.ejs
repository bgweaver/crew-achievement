<!DOCTYPE html>
<html>
<head>
  <title>Valiant Inquiry - Crew Dashboard</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Audiowide&family=Rajdhani:wght@300;400;500;600;700&family=Orbitron:wght@400;600;900&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/style.css">
</head>
<style>
  /* Add this CSS to center the content in stat cards */
.stat-card {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  min-height: 120px; /* Ensure consistent height */
  padding: 15px 10px; /* Add some padding for better spacing */
}

.stat-label {
  margin-bottom: 8px;
  margin-top: 8px;
}

.stat-value {
  font-size: 1.8em;
  font-weight: bold;
  margin: 8px 0;
  line-height: 1.2;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

/* Special handling for ISS location with emoji + text */
#issLocation {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 4px;
}

#issLocation span {
  font-size: 0.8em;
  font-weight: normal;
}

/* Make sure the playing time value also centers nicely */
#playingTime {
  display: flex;
  align-items: center;
  justify-content: center;
}
  input::placeholder {
  color: rgba(230, 230, 230, 0.4) !important;
  opacity: 1 !important;
}
.chat-suggestions {
  padding: 10px;
  background: rgba(16, 24, 39, 0.8);
  border-bottom: 1px solid rgba(59, 130, 246, 0.3);
}

.suggestion-label {
  font-size: 11px;
  color: rgba(59, 130, 246, 0.8);
  margin-bottom: 8px;
  text-align: center;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.suggestion-btn {
  display: block;
  width: 100%;
  padding: 8px 12px;
  margin: 4px 0;
  background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(99, 102, 241, 0.2));
  border: 1px solid rgba(59, 130, 246, 0.4);
  border-radius: 6px;
  color: #ffffff;
  font-size: 12px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  text-align: left;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.suggestion-btn:hover {
  background: linear-gradient(135deg, rgba(59, 130, 246, 0.4), rgba(99, 102, 241, 0.4));
  border-color: rgba(59, 130, 246, 0.6);
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
}

.suggestion-btn.fixed {
  background: linear-gradient(135deg, rgba(34, 197, 94, 0.2), rgba(16, 185, 129, 0.2));
  border-color: rgba(34, 197, 94, 0.4);
  font-weight: 600;
}

.suggestion-btn.fixed:hover {
  background: linear-gradient(135deg, rgba(34, 197, 94, 0.4), rgba(16, 185, 129, 0.4));
  border-color: rgba(34, 197, 94, 0.6);
  box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);
}

.suggestion-btn.rotating {
  animation: subtleGlow 3s ease-in-out infinite alternate;
}

@keyframes subtleGlow {
  0% { box-shadow: 0 0 5px rgba(59, 130, 246, 0.2); }
  100% { box-shadow: 0 0 10px rgba(59, 130, 246, 0.4); }
}
</style>
<body class="container mt-5">
  <!-- Particle effects -->
  <div class="particles" id="particles"></div>

  <!-- Main content -->
  <div class="row mb-4">
    <div class="col-md-8">
      <div class="welcome-message">
        <h1>Welcome back, <%= pseudonym %>!</h1>
        <p class="lead mt-4">
          <span class="badge team-badge mt-2 bg-<%= team === 'Red' ? 'danger' : team === 'Blue' ? 'primary' : team === 'Green' ? 'success' : 'warning' %>">
            <%= team %> Crew
          </span>
          <% 
            const progress = unlocked.length / achievements.length;
            let rank = 'Rookie';
            let rankClass = 'rank-rookie';
            if (progress === 1) { rank = 'Elite'; rankClass = 'rank-elite'; }
            else if (progress >= 0.75) { rank = 'Advanced'; rankClass = 'rank-advanced'; }
            else if (progress >= 0.5) { rank = 'Intermediate'; rankClass = 'rank-intermediate'; }
            else if (progress >= 0.25) { rank = 'Novice'; rankClass = 'rank-novice'; }
          %>
          <span class="badge rank-badge mt-2 <%= rankClass %>">
            <%= rank %> Cadet
          </span>
        </p>
      </div>
    </div>
    <div class="col-md-4 d-flex justify-content-end">
      <div class="progress-circle-svg" id="progressCircle">
        <svg>
          <circle class="progress-bg" cx="60" cy="60" r="50"></circle>
          <circle class="progress-fill" cx="60" cy="60" r="50"></circle>
        </svg>
        <div class="progress-text">
          <%= unlocked && achievements && achievements.length > 0 ? Math.round((unlocked.length / achievements.length) * 100) : 0 %>%
        </div>
      </div>
    </div>
  </div>

  <!-- Mission Status -->
  <div class="mission-status">
    <div class="row align-items-center">
      <div class="col-md-8">
        <h5>Current Mission Progress</h5>
        <p class="mb-1">Complete all achievements to reach Elite status!</p>
        <div class="achievement-progress">
          <div class="achievement-progress-bar" style="width: <%= unlocked && achievements && achievements.length > 0 ? Math.round((unlocked.length / achievements.length) * 100) : 0 %>%"></div>
        </div>
      </div>
      <div class="col-md-4 text-end">
        <% if (unlocked.length === achievements.length) { %>
          <span class="badge bg-success p-3">MISSION COMPLETE! 🎉</span>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Stats Grid -->
  <div class="stats-grid">
    <div class="stat-card">
      <div class="stat-label">Total Points</div>
      <div class="stat-value"><%= totalPoints %></div>
      <div class="stat-label">⚡ Power Level</div>
    </div>
    <div class="stat-card">
      <div class="stat-label">Achievements</div>
      <div class="stat-value"><%= unlocked.length %>/<%= achievements.length %></div>
      <div class="stat-label">🏆 Collected</div>
    </div>
    <div class="stat-card">
      <div class="stat-label">Playing Time</div>
      <div class="stat-value" id="playingTime">Calculating...</div>
      <div class="stat-label">🕐 Days Active</div>
    </div>
      <div class="stat-card">
      <div class="stat-label">ISS Location</div>
      <div class="stat-value" id="issLocation">🛰️ Tracking...</div>
      <div class="stat-label">🌍 Live Position</div>
    </div>
  </div>

  <!-- Power Meter -->
  <div class="power-meter">
    <div class="power-meter-fill" style="width: <%= Math.min(100, (totalPoints / 10)) %>%"></div>
  </div>

  <% if (unlocked.length === achievements.length) { %>
    <div class="alert alert-success text-center mb-4" style="background: linear-gradient(135deg, rgba(40, 199, 111, 0.9), rgba(34, 197, 94, 0.9)); border: 2px solid var(--success); animation: eliteShine 2s ease-in-out infinite;">
      <h4>🎉 LEGENDARY STATUS ACHIEVED! 🎉</h4>
      <p>You've unlocked all achievements and reached Elite rank! You're a true space pioneer!</p>
    </div>
  <% } %>

  <!-- Achievements Grid -->
  <h2 class="mb-4">🎯 Mission Objectives</h2>
  <div class="achievement-grid">
    <% achievements.forEach(a => { %>
      <div class="card achievement-card <%= unlocked.includes(a.id) ? 'unlocked' : 'locked' %>" data-ach-id="<%= a.id %>">
        <div class="position-relative">
          <img src="<%= a.image %>" class="card-img-top" alt="Achievement" style="height: 200px; object-fit: cover; filter: <%= unlocked.includes(a.id) ? 'none' : 'grayscale(100%) brightness(50%)' %>;">
          <% if (unlocked.includes(a.id)) { %>
            <div class="position-absolute top-0 end-0 p-2">
              <span class="badge bg-success">✓ COMPLETE</span>
            </div>
          <% } else { %>
            <div class="position-absolute top-0 end-0 p-2">
              <span class="badge bg-secondary">🔒 LOCKED</span>
            </div>
          <% } %>
        </div>
        <div class="card-body">
          <h5 class="card-title"><%= a.title %></h5>
          <p class="card-text text-white"><%= a.description %></p>
          <div class="d-flex justify-content-between align-items-center">
            <span class="badge mt-4 bg-<%= unlocked.includes(a.id) ? 'success' : 'secondary' %> fs-6">
              <%= a.points %> pts
            </span>
            <% if (unlocked.includes(a.id)) { %>
              <small class="text-success">🌟 Earned!</small>
            <% } else { %>
              <small class="text-muted">Keep going!</small>
            <% } %>
          </div>
        </div>
      </div>
    <% }) %>
  </div>

<div class="text-center mt-5 mb-4">
  <a href="/" class="btn btn-outline-primary">← Logout</a>
</div>
  
  <div id="achievement-pop"></div>

  <!-- Space facts bar -->
  <div class="space-facts" id="spaceFacts">
    Loading cosmic wisdom...
  </div>
  <!-- Add this right before the closing </body> tag in dashboard.ejs -->

<!-- Ship AI Chat Interface -->
<div id="shipAiChat" class="ship-ai-chat">
  <div class="chat-header">
    <div class="ai-status-indicator"></div>
    <span class="ai-name">VALIANT INQUIRY</span>
    <button class="chat-toggle" onclick="toggleChat()">
      <span class="toggle-icon">▼</span>
    </button>
  </div>
  
  <div class="chat-body" id="chatBody">
      <div class="chat-suggestions">
    <div class="suggestion-label">💫 Ask me about:</div>
    <button class="suggestion-btn fixed" onclick="sendSuggestion('What is our current mission?')">
      🎯 What is our mission?
    </button>
    <button class="suggestion-btn rotating" id="suggestion1" onclick="sendSuggestion(this.dataset.question)">
      🌟 Loading...
    </button>
    <button class="suggestion-btn rotating" id="suggestion2" onclick="sendSuggestion(this.dataset.question)">
      ⭐ Loading...
    </button>
  </div>
    <div class="chat-messages" id="chatMessages">
      <div class="message ai-message">
        <div class="message-avatar">🤖</div>
        <div class="message-content">
          <strong>VALIANT INQUIRY:</strong> Greetings, <%= pseudonym %>! I'm your ship's AI. Ask me anything about space, our mission, or the cosmos! 🚀
        </div>
      </div>
    </div>
    
    <div class="chat-input-container">
      <div class="input-group">
        <input type="text" id="chatInput" class="form-control chat-input" 
               placeholder="Ask about space, planets, stars..." 
               maxlength="200"
               onkeypress="handleChatKeyPress(event)">
        <button class="btn btn-primary chat-send-btn" onclick="sendMessage()">
          <span class="send-icon">➤</span>
        </button>
      </div>
      <div class="chat-status" id="chatStatus"></div>
    </div>
  </div>
</div>
<script>
const spaceQuestions = [
  { emoji: "🌌", text: "Tell me about black holes", question: "What are black holes and how do they work?" },
  { emoji: "🔴", text: "About Mars", question: "What makes Mars special compared to other planets?" },
  { emoji: "🌙", text: "Moon facts", question: "What are some cool facts about the Moon?" },
  { emoji: "☄️", text: "Comets & meteors", question: "What's the difference between comets, meteors, and asteroids?" },
  { emoji: "🌟", text: "How stars work", question: "How do stars create light and energy?" },
  { emoji: "🛰️", text: "Space exploration", question: "What are the coolest space missions humans have done?" },
  { emoji: "🌍", text: "Earth from space", question: "What does Earth look like from space?" },
  { emoji: "🚀", text: "Rocket science", question: "How do rockets escape Earth's gravity?" },
  { emoji: "👨‍🚀", text: "Being an astronaut", question: "What's it like to live in space?" },
  { emoji: "🪐", text: "Saturn's rings", question: "Why does Saturn have rings?" },
  { emoji: "🌞", text: "Our Sun", question: "What would happen if our Sun disappeared?" },
  { emoji: "🌌", text: "The Milky Way", question: "How big is our galaxy?" },
  { emoji: "🛸", text: "Space stations", question: "How do astronauts live on space stations?" },
  { emoji: "🌠", text: "Shooting stars", question: "What are shooting stars really?" },
  { emoji: "🔭", text: "Space telescopes", question: "How do telescopes help us explore space?" },
  { emoji: "🪨", text: "Space rocks", question: "Could an asteroid hit Earth?" },
  { emoji: "❄️", text: "Cold in space", question: "Why is space so cold?" },
  { emoji: "🌕", text: "Moon phases", question: "Why does the Moon change shape?" },
  { emoji: "⚡", text: "Solar storms", question: "What are solar flares?" },
  { emoji: "🚀", text: "Future missions", question: "What are the next big space missions planned?" }
];

let currentSuggestions = [];

function updateSuggestions() {
  const shuffled = [...spaceQuestions].sort(() => 0.5 - Math.random());
  currentSuggestions = shuffled.slice(0, 2);
  
  const suggestion1 = document.getElementById('suggestion1');
  const suggestion2 = document.getElementById('suggestion2');
  
  if (suggestion1 && suggestion2) {
    suggestion1.innerHTML = `${currentSuggestions[0].emoji} ${currentSuggestions[0].text}`;
    suggestion1.dataset.question = currentSuggestions[0].question;
    
    suggestion2.innerHTML = `${currentSuggestions[1].emoji} ${currentSuggestions[1].text}`;
    suggestion2.dataset.question = currentSuggestions[1].question;
  }
}

function sendSuggestion(question) {
  const chatInput = document.getElementById('chatInput');
  chatInput.value = question;
  sendMessage();
  
  // Hide suggestions after clicking one
  const suggestionsPanel = document.querySelector('.chat-suggestions');
  if (suggestionsPanel) {
    suggestionsPanel.style.display = 'none';
  }
  
  // Rotate suggestions after using one (for next time they toggle chat)
  setTimeout(updateSuggestions, 1000);
}

// Initialize suggestions when page loads
document.addEventListener('DOMContentLoaded', function() {
  updateSuggestions();
  
  // Rotate suggestions every 30 seconds
  setInterval(updateSuggestions, 30000);
  
  // Initialize ISS tracking (ADD THESE LINES)
  updateISSLocation();
  setInterval(updateISSLocation, 30000);
});
</script>
<script>
// === ACHIEVEMENT DEBUGGING ===
console.log('🔍 DEBUGGING ACHIEVEMENT COUNTS');
console.log('📊 Raw Data:');
console.log('  - Unlocked IDs:', <%- JSON.stringify(unlocked) %>);
console.log('  - Unlocked Count:', <%- unlocked.length %>);
console.log('  - Total Achievements:', <%- achievements.length %>);
console.log('  - Achievement List:', <%- JSON.stringify(achievements.map(a => a.id)) %>);

// Check for duplicates in unlocked array
const unlockedArray = <%- JSON.stringify(unlocked) %>;
const uniqueUnlocked = [...new Set(unlockedArray)];
console.log('🔍 Duplicate Check:');
console.log('  - Original length:', unlockedArray.length);
console.log('  - Unique length:', uniqueUnlocked.length);
console.log('  - Has duplicates:', unlockedArray.length !== uniqueUnlocked.length);

// Check for invalid achievement IDs
const allAchievementIds = <%- JSON.stringify(achievements.map(a => a.id)) %>;
const invalidIds = unlockedArray.filter(id => !allAchievementIds.includes(id));
console.log('🔍 Invalid IDs:', invalidIds);

// Calculate what the counts SHOULD be
console.log('📈 Expected vs Actual:');
console.log('  - Should show:', uniqueUnlocked.length + '/' + allAchievementIds.length);
console.log('  - Actually shows in UI:', <%- unlocked.length %> + '/' + <%- achievements.length %>);
console.log('================================');
</script>
<script>

// Chat functionality
let chatOpen = false;
let isTyping = false;

function toggleChat() {
  const chatBody = document.getElementById('chatBody');
  const toggleIcon = document.querySelector('.toggle-icon');
  
  chatOpen = !chatOpen;
  
  if (chatOpen) {
    chatBody.style.display = 'flex';
    toggleIcon.textContent = '▼';
    toggleIcon.style.transform = 'rotate(180deg)';
    
    // Show suggestions again when reopening chat
    const suggestionsPanel = document.querySelector('.chat-suggestions');
    if (suggestionsPanel) {
      suggestionsPanel.style.display = 'block';
    }
    
    // Focus input when opening
    setTimeout(() => {
      document.getElementById('chatInput').focus();
    }, 300);
  } else {
    chatBody.style.display = 'none';
    toggleIcon.textContent = '▼';
    toggleIcon.style.transform = 'rotate(0deg)';
  }
}

function handleChatKeyPress(event) {
  if (event.key === 'Enter' && !event.shiftKey) {
    event.preventDefault();
    sendMessage();
  }
}

async function sendMessage() {
  const input = document.getElementById('chatInput');
  const message = input.value.trim();
  
  if (!message || isTyping) return;
  
  // Add user message to chat
  addMessage(message, 'user');
  input.value = '';
  
  // Hide suggestions after sending any message (not just suggestion clicks)
  const suggestionsPanel = document.querySelector('.chat-suggestions');
  if (suggestionsPanel) {
    suggestionsPanel.style.display = 'none';
  }
  
  // Show typing indicator
  showTypingIndicator();
  
  try {
    const response = await fetch('/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: message,
        pseudonym: '<%= pseudonym %>'
      })
    });
    
    const data = await response.json();
    
    // Remove typing indicator
    hideTypingIndicator();
    
    if (data.response) {
      addMessage(data.response, 'ai');
    } else {
      addMessage('🚀 Ship AI systems temporarily offline. Please try again.', 'ai');
    }
    
  } catch (error) {
    console.error('Chat error:', error);
    hideTypingIndicator();
    addMessage('⚠️ Communication error with ship AI. Please try again.', 'ai');
  }
}

function addMessage(content, sender) {
  const messagesContainer = document.getElementById('chatMessages');
  const messageDiv = document.createElement('div');
  messageDiv.className = `message ${sender}-message`;
  
  const avatar = sender === 'user' ? '👤' : '🤖';
  const name = sender === 'user' ? '<%= pseudonym %>' : 'VALIANT INQUIRY';
  
  messageDiv.innerHTML = `
    <div class="message-avatar">${avatar}</div>
    <div class="message-content">
      <strong>${name}:</strong> ${content}
    </div>
  `;
  
  messagesContainer.appendChild(messageDiv);
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
  
  // Add animation
  messageDiv.style.opacity = '0';
  messageDiv.style.transform = 'translateY(20px)';
  setTimeout(() => {
    messageDiv.style.transition = 'all 0.3s ease';
    messageDiv.style.opacity = '1';
    messageDiv.style.transform = 'translateY(0)';
  }, 50);
}

function showTypingIndicator() {
  isTyping = true;
  const status = document.getElementById('chatStatus');
  status.textContent = 'VALIANT INQUIRY is thinking...';
  status.style.opacity = '1';
  
  // Add typing dots animation
  let dots = 0;
  const typingInterval = setInterval(() => {
    dots = (dots + 1) % 4;
    status.textContent = 'VALIANT INQUIRY is thinking' + '.'.repeat(dots);
  }, 500);
  
  // Store interval so we can clear it
  status.dataset.interval = typingInterval;
}

function hideTypingIndicator() {
  isTyping = false;
  const status = document.getElementById('chatStatus');
  
  // Clear the typing animation interval
  if (status.dataset.interval) {
    clearInterval(parseInt(status.dataset.interval));
    delete status.dataset.interval;
  }
  
  status.style.opacity = '0';
  setTimeout(() => {
    status.textContent = '';
  }, 300);
}

// Auto-open chat on first visit (optional)
document.addEventListener('DOMContentLoaded', function() {
  // You can uncomment this to auto-open chat for new users
  // if (localStorage.getItem('chatIntroSeen') !== 'true') {
  //   setTimeout(() => {
  //     toggleChat();
  //     localStorage.setItem('chatIntroSeen', 'true');
  //   }, 2000);
  // }
});
</script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Space facts for the dashboard
    const spaceFacts = [
      "Keep pushing, <%= pseudonym %>! You're <%= Math.round((unlocked.length / achievements.length) * 100) %>% of the way to completion!",
      "Your <%= team %> Crew is counting on you!",
      "Venus spins backwards and super slowly — one day on Venus is longer than its year.",
      "A teaspoon of neutron star would weigh about a billion tons — no, seriously.",
      "The Sun accounts for 99.8% of the mass in the solar system.",
      "Jupiter is so big you could fit all the other planets inside it — and still have room left.",
      "Saturn's rings look solid but they're made of billions of ice chunks, some as small as pebbles.",
      "Mars has the tallest volcano in the solar system — Olympus Mons — nearly 3x the height of Mount Everest.",
      "The Moon is slowly drifting away from Earth — about 1.5 inches per year.",
      "Uranus rotates on its side — its tilt is so extreme, it basically rolls around the Sun.",
      "Mercury has almost no atmosphere, so its surface temperature swings 1000°F between day and night.",
      "Pluto has mountains made of ice, and it may have a subsurface ocean.",
      "In space, metal pieces can weld together without heat — it's called cold welding.",
      "A day on Jupiter is only about 10 hours long — fastest spinner in the solar system.",
      "Earth is the only planet known to have plate tectonics (and life, of course).",
      "Saturn's moon Titan has rivers and lakes — but they're made of liquid methane, not water.",
      "One day on the Moon is about 29 Earth days long.",
      "The Sun's core is about 27 million °F — it fuses 600 million tons of hydrogen every second.",
      "The Kuiper Belt is a ring of icy objects beyond Neptune — Pluto hangs out there.",
      "You could fit 1.3 million Earths inside the Sun.",
      "It rains sulfuric acid on Venus — and the pressure would crush you flat.",
      "A year on Neptune is 165 Earth years long.",
      "The Milky Way galaxy is about 100,000 light-years across.",
      "There's a giant storm on Jupiter called the Great Red Spot — it's bigger than Earth and has raged for centuries.",
      "Astronauts can grow up to 2 inches taller in microgravity (their spines decompress).",
      "You can't burp in space — no gravity means gas doesn't separate from liquids in your stomach.",
      "The Hubble Space Telescope can see galaxies more than 13 billion light-years away.",
      "The universe is expanding — and the farther away a galaxy is, the faster it's moving away.",
      "Some rogue planets just drift through space without orbiting a star.",
      "Black holes can warp time — near the event horizon, time passes slower.",
      "There's a huge hexagon-shaped storm at Saturn's north pole.",
      "In 1977, we launched the Voyager probes — they're still flying, and one has left the solar system.",
      "Earth's magnetic field protects us from deadly solar radiation — and creates the auroras.",
      "Some stars explode in supernovas and create elements like gold, iron, and uranium.",
      "There's a comet named Halley that's visible from Earth every 76 years — next up is 2061.",
      "The Moon has moonquakes — some strong enough to last for 10 minutes.",
      "The largest known star, UY Scuti, is over 1,700 times the diameter of the Sun.",
      "If two neutron stars crash into each other, they can create a black hole — and ripples in space-time.",
      "There's a moon of Saturn, Enceladus, that shoots ice geysers into space — it might have an ocean beneath its crust.",
      "Solar flares can knock out satellites and power grids on Earth.",
      "The ISS orbits Earth every 90 minutes — astronauts see 16 sunrises and sunsets a day.",
      "If you shouted in space, no one would hear you — there's no air for sound to travel through.",
      "The James Webb Space Telescope can see infrared light — basically heat — from distant galaxies.",
      "In 2020, scientists discovered a possible radio signal from Proxima Centauri — our closest stellar neighbor.",
      "There's a planet made of diamond (probably) — it's called 55 Cancri e.",
      "The early universe was just hydrogen, helium, and darkness — stars had to light things up.",
      "Comets have tails that always point *away* from the Sun, no matter what direction they're moving.",
      "Some galaxies are shaped like spirals, others like blobs, and some like exploding fireworks.",
      "The Sun flips its magnetic poles every 11 years — like a solar reset button.",
      "Without a spacesuit, you'd die in space in less than a minute — not from cold, but from lack of pressure.",
      "Your GPS only works because satellites constantly account for Einstein's theory of relativity.",
      "Mars has seasons, polar ice caps, and dust storms that can cover the whole planet.",
      "The Moon was probably formed when something the size of Mars slammed into Earth.",
      "It takes 225 million years for the Sun to orbit once around the Milky Way.",
      "You've earned <%= totalPoints %> points so far. Keep reaching for the stars!",
      "Achievement unlocked: Being awesome! Keep it up!"
    ];

    let lastFactIndex = -1;

    function rotateFacts() {
      const factElement = document.getElementById('spaceFacts');
      factElement.style.transition = 'opacity 0.5s';
      factElement.style.opacity = '0';

      setTimeout(() => {
        let newIndex;
        do {
          newIndex = Math.floor(Math.random() * spaceFacts.length);
        } while (newIndex === lastFactIndex && spaceFacts.length > 1); // avoid repeat

        lastFactIndex = newIndex;

        factElement.textContent = spaceFacts[newIndex];
        factElement.style.opacity = '1';
      }, 500);
    }

    // Start rotating facts
    rotateFacts();
    setInterval(rotateFacts, 45000);

    // Calculate and display playing time and overall rank
    function calculateStats() {
  const studentData = <%- JSON.stringify(studentData) %>;
  const welcomeAchievementId = "welcome_aboard";
  
  // Calculate playing time
  let playingTime = "New";
  let startDate = null;
  
  // First try to get the welcome achievement date
  if (studentData.achievementDates && studentData.achievementDates[welcomeAchievementId]) {
    startDate = new Date(studentData.achievementDates[welcomeAchievementId]);
  }
  // Fallback to student creation date
  else if (studentData.dateAdded) {
    startDate = new Date(studentData.dateAdded);
  }
  
  if (startDate) {
    const now = new Date();
    const diffTime = Math.abs(now - startDate);
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    
    // If less than 1 day, show "< 1 day", otherwise show the number of days
    if (diffDays === 0) {
      playingTime = "< 1 day";
    } else {
      playingTime = diffDays;
    }
  }
  
  document.getElementById('playingTime').textContent = playingTime;
  
  // Calculate overall rank
  const overallRank = <%= studentRank || 'N/A' %>;
  document.getElementById('overallRank').textContent = overallRank;
}

    // Run calculations
    calculateStats();

    // Create particle effects
    function createParticle() {
      const particle = document.createElement('div');
      particle.className = 'particle';
      particle.style.left = Math.random() * window.innerWidth + 'px';
      particle.style.animationDuration = (Math.random() * 10 + 5) + 's';
      particle.style.animationDelay = Math.random() * 5 + 's';
      document.getElementById('particles').appendChild(particle);
      
      setTimeout(() => particle.remove(), 15000);
    }

    // Create particles periodically
    setInterval(createParticle, 500);

    // Achievement card interactions
    document.querySelectorAll('.achievement-card').forEach(card => {
      card.addEventListener('click', function() {
        if (this.classList.contains('unlocked')) {
          // Celebration effect
          this.style.transform = 'scale(1.05) rotateY(360deg)';
          setTimeout(() => {
            this.style.transform = '';
          }, 600);
          
          // Create sparkles
          for(let i = 0; i < 5; i++) {
            setTimeout(() => createSparkle(this), i * 100);
          }
        } else {
          // Shake effect for locked
          this.style.animation = 'shake 0.5s';
          setTimeout(() => {
            this.style.animation = '';
          }, 500);
        }
      });
    });

    // Shake animation
    const style = document.createElement('style');
    style.textContent = `
      @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-10px); }
        75% { transform: translateX(10px); }
      }
      @keyframes eliteShine {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.8; }
      }
    `;
    document.head.appendChild(style);

    // Create sparkle effect
    function createSparkle(element) {
      const sparkle = document.createElement('div');
      sparkle.style.position = 'absolute';
      sparkle.style.width = '10px';
      sparkle.style.height = '10px';
      sparkle.style.background = '#ffd700';
      sparkle.style.borderRadius = '50%';
      sparkle.style.pointerEvents = 'none';
      sparkle.style.zIndex = '1000';
      
      const rect = element.getBoundingClientRect();
      sparkle.style.left = rect.left + rect.width / 2 + 'px';
      sparkle.style.top = rect.top + rect.height / 2 + 'px';
      
      document.body.appendChild(sparkle);
      
      const angle = Math.random() * Math.PI * 2;
      const distance = 50 + Math.random() * 50;
      
      sparkle.animate([
        { 
          transform: 'translate(-50%, -50%) scale(1)',
          opacity: 1 
        },
        { 
          transform: `translate(${Math.cos(angle) * distance}px, ${Math.sin(angle) * distance}px) scale(0)`,
          opacity: 0 
        }
      ], {
        duration: 1000,
        easing: 'ease-out'
      }).onfinish = () => sparkle.remove();
    }

    // Achievement popup logic
    const newAchievements = <%- JSON.stringify(newlyUnlocked || []) %>;
    const achievements = <%- JSON.stringify(achievements) %>;

    function showBigToast(title, index) {
      console.log('Showing popup for:', title);
      const pop = document.getElementById("achievement-pop");
      pop.innerHTML = `🏆 ACHIEVEMENT UNLOCKED<br><span class="subtitle">${title}</span>`;
      pop.classList.add("show");
      
      // Create confetti effect
      createConfetti();
      
      setTimeout(() => {
        pop.classList.remove("show");
      }, 3000);
    }

    // Create confetti effect
    function createConfetti() {
      const colors = ['#ff006e', '#00ffff', '#39ff14', '#ffd700', '#ff00ff'];
      for(let i = 0; i < 50; i++) {
        setTimeout(() => {
          const confetti = document.createElement('div');
          confetti.style.position = 'fixed';
          confetti.style.width = '10px';
          confetti.style.height = '10px';
          confetti.style.background = colors[Math.floor(Math.random() * colors.length)];
          confetti.style.left = '50%';
          confetti.style.top = '50%';
          confetti.style.zIndex = '2001';
          confetti.style.pointerEvents = 'none';
          document.body.appendChild(confetti);
          
          const angle = (Math.PI * 2 * i) / 50;
          const velocity = 200 + Math.random() * 200;
          const gravity = 1000;
          
          confetti.animate([
            { 
              transform: 'translate(-50%, -50%) rotate(0deg)',
              opacity: 1 
            },
            { 
              transform: `translate(${Math.cos(angle) * velocity}px, ${Math.sin(angle) * velocity - gravity}px) rotate(720deg)`,
              opacity: 0 
            }
          ], {
            duration: 2000,
            easing: 'cubic-bezier(.25,.46,.45,.94)'
          }).onfinish = () => confetti.remove();
        }, i * 20);
      }
    }

    // Show popups for new achievements
    if (newAchievements.length > 0) {
      console.log('Found new achievements, showing popups...');
      newAchievements.forEach((id, index) => {
        setTimeout(() => {
          const achievement = achievements.find(a => a.id === id);
          if (achievement) {
            console.log('Found achievement data:', achievement);
            showBigToast(achievement.title, index);
          } else {
            console.log('Could not find achievement with id:', id);
          }
        }, index * 4000);
      });
    }

    // Progress circle animation on load
    setTimeout(() => {
      const progressCircle = document.querySelector('.progress-circle');
      if (progressCircle) {
        progressCircle.style.transition = 'all 1s ease';
        progressCircle.style.transform = 'scale(1.1)';
        setTimeout(() => {
          progressCircle.style.transform = 'scale(1)';
        }, 300);
      }
    }, 500);

    // Animate stats on scroll
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.style.opacity = '1';
          entry.target.style.transform = 'translateY(0)';
        }
      });
    }, observerOptions);

    // Observe all stat cards
    document.querySelectorAll('.stat-card').forEach((card, index) => {
      card.style.opacity = '0';
      card.style.transform = 'translateY(20px)';
      card.style.transition = `all 0.5s ease ${index * 0.1}s`;
      observer.observe(card);
    });


    // Create floating stars effect in background
    function createBackgroundStar() {
      const star = document.createElement('div');
      star.style.position = 'fixed';
      star.style.width = '2px';
      star.style.height = '2px';
      star.style.background = '#fff';
      star.style.borderRadius = '50%';
      star.style.pointerEvents = 'none';
      star.style.zIndex = '-1';
      star.style.left = Math.random() * window.innerWidth + 'px';
      star.style.top = '-10px';
      star.style.opacity = Math.random() * 0.8 + 0.2;
      
      document.body.appendChild(star);
      
      const duration = Math.random() * 10000 + 10000;
      const horizontalMovement = (Math.random() - 0.5) * 100;
      
      star.animate([
        { transform: 'translateY(0) translateX(0)', opacity: star.style.opacity },
        { transform: `translateY(${window.innerHeight + 20}px) translateX(${horizontalMovement}px)`, opacity: '0' }
      ], {
        duration: duration,
        easing: 'linear'
      }).onfinish = () => star.remove();
    }

    // Create background stars periodically
    setInterval(createBackgroundStar, 300);

    function updateProgressCircle() {
      const unlockedCount = <%= unlocked ? unlocked.length : 0 %>;
      const totalCount = <%= achievements ? achievements.length : 1 %>;
      const percentage = totalCount > 0 ? Math.round((unlockedCount / totalCount) * 100) : 0;
      
      console.log(`Progress: ${unlockedCount}/${totalCount} = ${percentage}%`);
      
      const progressFill = document.querySelector('.progress-fill');
      const progressText = document.querySelector('.progress-text');
      const progressCircle = document.querySelector('.progress-circle-svg');
      
      if (progressFill && progressText) {
        // Calculate stroke-dashoffset
        const circumference = 314; // 2π * 50
        const offset = circumference - (circumference * percentage) / 100;
        
        console.log(`Setting offset to: ${offset}`);
        
        // Update the progress fill
        progressFill.style.strokeDashoffset = offset;
        
        // Update text
        progressText.textContent = percentage + '%';
        
        // Add complete class if 100%
        if (percentage === 100) {
          progressCircle.classList.add('complete');
        }
      } else {
        console.error('Progress circle elements not found');
      }
    }

    // Call this function when the page loads
    setTimeout(updateProgressCircle, 1000);
  </script>
  <div id="spaceViewer" style="
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0, 0, 0, 0.95);
  display: none;
  z-index: 3000;
  overflow-y: auto;
">
  <div style="
    max-width: 900px;
    margin: 20px auto;
    padding: 20px;
    position: relative;
  ">
    <!-- Close button -->
    <button onclick="closeSpaceViewer()" style="
      position: absolute;
      top: 10px;
      right: 20px;
      background: rgba(239, 68, 68, 0.8);
      border: none;
      color: white;
      font-size: 24px;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      cursor: pointer;
      z-index: 3001;
    ">×</button>

    <!-- Header -->
    <div style="text-align: center; margin-bottom: 20px;">
      <h2 style="color: #60a5fa; margin: 0;">🌌 Space Explorer</h2>
      <p style="color: #e5e7eb; margin: 10px 0;">Discover amazing images from NASA and space exploration!</p>
    </div>

    <!-- Image tabs -->
    <div style="display: flex; justify-content: center; gap: 10px; margin-bottom: 20px; flex-wrap: wrap;">
      <button onclick="showSpaceImage('apod')" class="space-tab active" id="tab-apod">
        🌟 Picture of the Day
      </button>
      <button onclick="showSpaceImage('mars')" class="space-tab" id="tab-mars">
        🔴 Mars Photos
      </button>
      <button onclick="showSpaceImage('earth')" class="space-tab" id="tab-earth">
        🌍 Earth from Space
      </button>
      <button onclick="showSpaceImage('hubble')" class="space-tab" id="tab-hubble">
        🔭 Hubble Images
      </button>
    </div>

    <!-- Content area -->
    <div id="spaceContent" style="
      background: rgba(30, 41, 59, 0.9);
      border-radius: 15px;
      padding: 25px;
      min-height: 400px;
      border: 2px solid #3b82f6;
    ">
      <div style="text-align: center; color: white;">
        <div style="font-size: 48px; margin-bottom: 20px;">🚀</div>
        <p>Loading space images...</p>
      </div>
    </div>
  </div>
</div>

<style>
.space-tab {
  background: linear-gradient(135deg, rgba(59, 130, 246, 0.3), rgba(99, 102, 241, 0.3));
  border: 1px solid rgba(59, 130, 246, 0.6);
  color: white;
  padding: 10px 15px;
  border-radius: 25px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 600;
  transition: all 0.3s ease;
  margin: 5px;
}

.space-tab:hover {
  background: linear-gradient(135deg, rgba(59, 130, 246, 0.5), rgba(99, 102, 241, 0.5));
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
}

.space-tab.active {
  background: linear-gradient(135deg, rgba(59, 130, 246, 0.8), rgba(99, 102, 241, 0.8));
  border-color: #60a5fa;
  box-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
}

.space-image {
  width: 100%;
  max-height: 500px;
  object-fit: cover;
  border-radius: 10px;
  margin-bottom: 15px;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
}

.space-description {
  color: #e5e7eb;
  font-size: 16px;
  line-height: 1.6;
  margin-top: 15px;
}

.space-title {
  color: #60a5fa;
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 15px;
  text-align: center;
}

.loading-spinner {
  display: inline-block;
  width: 40px;
  height: 40px;
  border: 4px solid rgba(59, 130, 246, 0.3);
  border-radius: 50%;
  border-top-color: #3b82f6;
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}
</style>

<script>
let currentSpaceCategory = 'apod';

function showSpaceViewer() {
  document.getElementById('spaceViewer').style.display = 'block';
  document.body.style.overflow = 'hidden'; // Prevent background scrolling
  showSpaceImage('apod'); // Load default content
}

function closeSpaceViewer() {
  document.getElementById('spaceViewer').style.display = 'none';
  document.body.style.overflow = 'auto'; // Restore scrolling
}

function showSpaceImage(category) {
  currentSpaceCategory = category;
  
  // Update tab active state
  document.querySelectorAll('.space-tab').forEach(tab => tab.classList.remove('active'));
  document.getElementById(`tab-${category}`).classList.add('active');
  
  // Show loading
  document.getElementById('spaceContent').innerHTML = `
    <div style="text-align: center; color: white; padding: 50px;">
      <div class="loading-spinner"></div>
      <p style="margin-top: 20px;">Loading amazing space images...</p>
    </div>
  `;
  
  // Load content based on category
  switch(category) {
    case 'apod':
      loadNASAAPOD();
      break;
    case 'mars':
      loadMarsImages();
      break;
    case 'earth':
      loadEarthImages();
      break;
    case 'hubble':
      loadHubbleImages();
      break;
  }
}

// Replace your space functions with these working versions

async function loadNASAAPOD() {
  try {
    const response = await fetch('https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY');
    const apod = await response.json();
    
    console.log('NASA APOD Response:', apod);
    
    let mediaContent = '';
    if (apod.media_type === 'image') {
      mediaContent = `<img src="${apod.url}" class="space-image" alt="${apod.title}">`;
    } else {
      mediaContent = `
        <div style="background: linear-gradient(135deg, #1e293b, #334155); padding: 60px; border-radius: 10px; text-align: center; margin-bottom: 15px;">
          <div style="font-size: 64px; margin-bottom: 20px;">📹</div>
          <p style="color: #e5e7eb;">Today's NASA content is a video! Check it out at nasa.gov</p>
        </div>
      `;
    }
    
    document.getElementById('spaceContent').innerHTML = `
      <div class="space-title">${apod.title || 'NASA Picture of the Day'}</div>
      ${mediaContent}
      <div class="space-description">${apod.explanation || 'Amazing space content from NASA!'}</div>
      <div style="text-align: center; margin-top: 20px;">
        <small style="color: #9ca3af;">📅 ${apod.date || 'Today'} | 🚀 NASA Astronomy Picture of the Day</small>
      </div>
    `;
  } catch (error) {
    console.error('NASA APOD Error:', error);
    // Fallback to a curated space image
    loadFallbackNASAImage();
  }
}

function loadFallbackNASAImage() {
  const fallbackImages = [
    {
      url: 'https://images.unsplash.com/photo-1446776653964-20c1d3a81b06?w=800&h=600&fit=crop&auto=format',
      title: '🌌 Amazing Galaxy View',
      description: 'This stunning view shows a spiral galaxy much like our own Milky Way! Galaxies contain billions of stars and are the building blocks of our universe. Scientists estimate there are over 100 billion galaxies in the observable universe!'
    },
    {
      url: 'https://images.unsplash.com/photo-1502134249126-9f3755a50d78?w=800&h=600&fit=crop&auto=format',
      title: '🌟 Colorful Nebula',
      description: 'This beautiful nebula is a cloud of gas and dust where new stars are born! The colors come from different elements glowing in space - hydrogen creates red light, while oxygen creates blue and green light.'
    },
    {
      url: 'https://images.unsplash.com/photo-1419242902214-272b3f66ee7a?w=800&h=600&fit=crop&auto=format',
      title: '🌌 Deep Space Wonder',
      description: 'This incredible view of deep space shows the beauty and mystery of our universe! Every point of light could be a star or an entire galaxy containing billions of stars like our Sun.'
    }
  ];
  
  const randomImage = fallbackImages[Math.floor(Math.random() * fallbackImages.length)];
  
  document.getElementById('spaceContent').innerHTML = `
    <div class="space-title">${randomImage.title}</div>
    <img src="${randomImage.url}" class="space-image" alt="Space image">
    <div class="space-description">${randomImage.description}</div>
    <div style="text-align: center; margin-top: 20px;">
      <small style="color: #9ca3af;">🚀 Amazing Space Content</small>
    </div>
  `;
}

async function loadMarsImages() {
  try {
    // Try multiple sols to increase chance of getting photos
    const sols = [1000, 1500, 2000, 2500, 3000, 1200, 1800, 500, 750];
    const randomSol = sols[Math.floor(Math.random() * sols.length)];
    
    const response = await fetch(`https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=${randomSol}&api_key=DEMO_KEY`);
    const data = await response.json();
    
    console.log('Mars API Response:', data);
    
    if (data.photos && data.photos.length > 0) {
      const randomPhoto = data.photos[Math.floor(Math.random() * Math.min(20, data.photos.length))];
      
      document.getElementById('spaceContent').innerHTML = `
        <div class="space-title">🔴 Mars Surface Photo</div>
        <img src="${randomPhoto.img_src}" class="space-image" alt="Mars surface photo">
        <div class="space-description">
          This incredible photo was taken by NASA's ${randomPhoto.rover.name} rover on Mars! 
          The rover has been exploring the Red Planet and sending back amazing images like this one. 
          Mars is about 140 million miles away from Earth, and it takes months for spacecraft to travel there.
          <br><br>
          <strong>Camera:</strong> ${randomPhoto.camera.full_name}<br>
          <strong>Mars Day (Sol):</strong> ${randomPhoto.sol}<br>
          <strong>Earth Date:</strong> ${randomPhoto.earth_date}
        </div>
        <div style="text-align: center; margin-top: 20px;">
          <button onclick="loadMarsImages()" style="background: linear-gradient(135deg, #dc2626, #b91c1c); border: none; color: white; padding: 10px 20px; border-radius: 20px; cursor: pointer;">
            🔄 See Another Mars Photo
          </button>
        </div>
      `;
    } else {
      // Fallback if no photos found
      loadFallbackMarsImage();
    }
  } catch (error) {
    console.error('Mars API Error:', error);
    loadFallbackMarsImage();
  }
}

function loadFallbackMarsImage() {
  const marsImages = [
    {
      url: 'https://images.unsplash.com/photo-1614732414444-096e5f1122d5?w=800&h=600&fit=crop&auto=format',
      title: '🔴 Mars Landscape',
      description: 'This shows what the surface of Mars looks like! Mars is called the "Red Planet" because of iron oxide (rust) on its surface. The planet has huge mountains, deep canyons, and evidence that water once flowed there billions of years ago!'
    },
    {
      url: 'https://images.unsplash.com/photo-1583911860205-72f8ac8dd4ca?w=800&h=600&fit=crop&auto=format',
      title: '🔴 Martian Desert',
      description: 'Mars has vast desert landscapes like this one! The planet experiences dust storms that can cover the entire planet and last for months. These storms are caused by temperature differences as Mars orbits the Sun!'
    }
  ];
  
  const randomImage = marsImages[Math.floor(Math.random() * marsImages.length)];
  
  document.getElementById('spaceContent').innerHTML = `
    <div class="space-title">${randomImage.title}</div>
    <img src="${randomImage.url}" class="space-image" alt="Mars surface">
    <div class="space-description">${randomImage.description}</div>
    <div style="text-align: center; margin-top: 20px;">
      <button onclick="loadMarsImages()" style="background: linear-gradient(135deg, #dc2626, #b91c1c); border: none; color: white; padding: 10px 20px; border-radius: 20px; cursor: pointer;">
        🔄 See Another Mars Photo
      </button>
    </div>
  `;
}

function loadEarthImages() {
  // High-quality Earth images from reliable sources
  const earthImages = [
    {
      url: 'https://images.unsplash.com/photo-1446776653964-20c1d3a81b06?w=800&h=600&fit=crop&auto=format',
      title: '🌍 Earth from Space',
      description: 'This incredible view shows Earth from space! You can see the thin blue line of our atmosphere that protects all life on our planet. From space, Earth looks like a precious blue marble floating in the darkness of space!'
    },
    {
      url: 'https://images.unsplash.com/photo-1502134249126-9f3755a50d78?w=800&h=600&fit=crop&auto=format',
      title: '🌅 Sunrise Over Earth',
      description: 'Astronauts on the International Space Station see 16 sunrises and sunsets every single day! This amazing view shows what a sunrise looks like from 250 miles above Earth. The golden glow is our atmosphere scattering sunlight.'
    },
    {
      url: 'https://images.unsplash.com/photo-1518837695005-2083093ee35b?w=800&h=600&fit=crop&auto=format',
      title: '⚡ Earth\'s Weather Systems',
      description: 'This satellite view shows Earth\'s amazing weather patterns! You can see swirling clouds and storm systems. Weather happens because our planet spins and the Sun heats different parts of Earth at different times!'
    },
    {
      url: 'https://images.unsplash.com/photo-1614732414444-096e5f1122d5?w=800&h=600&fit=crop&auto=format',
      title: '🌊 Our Blue Planet',
      description: 'About 71% of Earth\'s surface is covered by water, which is why we call it the "Blue Planet"! All life on Earth depends on this water. From space, you can clearly see why Earth is so special and unique!'
    }
  ];
  
  const randomImage = earthImages[Math.floor(Math.random() * earthImages.length)];
  
  document.getElementById('spaceContent').innerHTML = `
    <div class="space-title">${randomImage.title}</div>
    <img src="${randomImage.url}" class="space-image" alt="Earth from space">
    <div class="space-description">${randomImage.description}</div>
    <div style="text-align: center; margin-top: 20px;">
      <button onclick="loadEarthImages()" style="background: linear-gradient(135deg, #059669, #047857); border: none; color: white; padding: 10px 20px; border-radius: 20px; cursor: pointer;">
        🔄 See Another Earth Photo
      </button>
    </div>
  `;
}

function loadHubbleImages() {
  // Space telescope images - using reliable sources
  const hubbleImages = [
    {
      url: 'https://images.unsplash.com/photo-1502134249126-9f3755a50d78?w=800&h=600&fit=crop&auto=format',
      title: '🌌 Colorful Nebula',
      description: 'This colorful cloud is a nebula - a stellar nursery where new stars are born! The beautiful colors come from different gases glowing in space. Hydrogen glows red, while oxygen glows blue and green!'
    },
    {
      url: 'https://images.unsplash.com/photo-1419242902214-272b3f66ee7a?w=800&h=600&fit=crop&auto=format',
      title: '⭐ Star Cluster',
      description: 'This is a cluster of thousands of stars all grouped together! Stars often form in groups like this, and they\'re all roughly the same age. Our Sun was probably born in a star cluster like this about 4.6 billion years ago!'
    },
    {
      url: 'https://images.unsplash.com/photo-1446776653964-20c1d3a81b06?w=800&h=600&fit=crop&auto=format',
      title: '🌌 Spiral Galaxy',
      description: 'This beautiful spiral galaxy is like our own Milky Way! It contains billions of stars swirling in a giant cosmic dance. Galaxies are huge collections of stars - some contain over a trillion stars!'
    },
    {
      url: 'https://images.unsplash.com/photo-1462331940025-496dfbfc7564?w=800&h=600&fit=crop&auto=format',
      title: '🌟 Deep Space Wonder',
      description: 'This amazing view shows the incredible beauty of deep space! Every point of light you see could be a star with its own planets, or even an entire galaxy containing billions of stars!'
    }
  ];
  
  const randomImage = hubbleImages[Math.floor(Math.random() * hubbleImages.length)];
  
  document.getElementById('spaceContent').innerHTML = `
    <div class="space-title">${randomImage.title}</div>
    <img src="${randomImage.url}" class="space-image" alt="Space telescope image">
    <div class="space-description">${randomImage.description}</div>
    <div style="text-align: center; margin-top: 20px;">
      <button onclick="loadHubbleImages()" style="background: linear-gradient(135deg, #7c3aed, #6d28d9); border: none; color: white; padding: 10px 20px; border-radius: 20px; cursor: pointer;">
        🔄 See Another Space Photo
      </button>
    </div>
  `;
}
function showSpaceError(message) {
  document.getElementById('spaceContent').innerHTML = `
    <div style="text-align: center; color: white; padding: 50px;">
      <div style="font-size: 64px; margin-bottom: 20px;">🛸</div>
      <p>${message}</p>
      <button onclick="showSpaceImage(currentSpaceCategory)" style="background: linear-gradient(135deg, #3b82f6, #1d4ed8); border: none; color: white; padding: 10px 20px; border-radius: 20px; cursor: pointer; margin-top: 15px;">
        🔄 Try Again
      </button>
    </div>
  `;
}

// Close modal when clicking outside
document.addEventListener('click', function(e) {
  if (e.target.id === 'spaceViewer') {
    closeSpaceViewer();
  }
});

// Close modal with Escape key
document.addEventListener('keydown', function(e) {
  if (e.key === 'Escape' && document.getElementById('spaceViewer').style.display === 'block') {
    closeSpaceViewer();
  }
});


async function updateISSLocation() {
  console.log('🛰️ ISS: Starting location update...');
  
  try {
    console.log('🛰️ ISS: Fetching from /api/iss...');
    const response = await fetch('/api/iss');
    console.log('🛰️ ISS: Response status:', response.status);
    
    const data = await response.json();
    console.log('🛰️ ISS: Raw data received:', data);
    
    const issLocationDiv = document.getElementById('issLocation');
    
    // Check if we have enhanced data
    if (data.location && data.kid_friendly) {
      console.log('🛰️ ISS: Using enhanced data');
      console.log('🛰️ ISS: Location object:', data.location);
      
      const location = data.location;
      
      if (location.ocean) {
        console.log('🛰️ ISS: Over ocean:', location.country);
        issLocationDiv.innerHTML = `${location.emoji || '🌊'}<br><span style="font-size: 0.8em;">${location.country}</span>`;
      } else {
        console.log('🛰️ ISS: Over land:', location.country);
        const shortCountry = location.country.length > 12 ? 
          location.country.substring(0, 10) + '...' : 
          location.country;
        issLocationDiv.innerHTML = `${location.emoji || '🌍'}<br><span style="font-size: 0.8em;">${shortCountry}</span>`;
      }
      
      // Store the full message for tooltip
      issLocationDiv.title = data.kid_friendly.message;
      
    } else if (data.iss_position) {
      console.log('🛰️ ISS: Using basic coordinate data');
      // Fallback to coordinates if enhanced data isn't available
      const lat = parseFloat(data.iss_position.latitude).toFixed(1);
      const lon = parseFloat(data.iss_position.longitude).toFixed(1);
      const latDir = lat >= 0 ? 'N' : 'S';
      const lonDir = lon >= 0 ? 'E' : 'W';
      
      issLocationDiv.innerHTML = `${Math.abs(lat)}°${latDir}<br>${Math.abs(lon)}°${lonDir}`;
      console.log('🛰️ ISS: Showing coordinates:', `${Math.abs(lat)}°${latDir}, ${Math.abs(lon)}°${lonDir}`);
    } else {
      console.error('🛰️ ISS: Unexpected data format:', data);
      issLocationDiv.innerHTML = '🛰️<br><span style="font-size: 0.8em;">Error</span>';
    }
    
    // Add animation
    issLocationDiv.style.animation = 'pulse 2s ease-in-out';
    setTimeout(() => {
      issLocationDiv.style.animation = '';
    }, 2000);
    
  } catch (error) {
    console.error('🛰️ ISS: Error occurred:', error);
    document.getElementById('issLocation').innerHTML = '🛰️<br><span style="font-size: 0.8em;">Offline</span>';
  }
}
</script>
</body>
</html>