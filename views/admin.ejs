<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Valiant Inquiry - Crew Control Center</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/style.css">
  <style>
    .nav-pills .nav-link.active { background-color: #0d6efd; }
    .table-container { max-height: 400px; overflow-y: auto; }
    .student-card { transition: all 0.3s ease; }
    .student-card:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); }

  input::placeholder {
  color: rgba(230, 230, 230, 0.4) !important;
  opacity: 1 !important;
}
.status-indicator {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: inline-block;
}

.status-indicator.online {
  background: #28a745;
  box-shadow: 0 0 10px #28a745;
  animation: pulse 2s infinite;
}

.status-indicator.offline {
  background: #dc3545;
  box-shadow: 0 0 10px #dc3545;
}

.status-indicator.testing {
  background: #ffc107;
  box-shadow: 0 0 10px #ffc107;
  animation: blink 1s infinite;
}

@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.5; }
  100% { opacity: 1; }
}

@keyframes blink {
  0%, 50% { opacity: 1; }
  51%, 100% { opacity: 0.3; }
}

  </style>
</head>
<body class="container-fluid mt-3">
  <nav class="navbar navbar-expand-lg navbar-dark mb-4">
    <div class="container-fluid">
      <span class="navbar-brand">🚀 Crew Control Center</span>
      <div class="navbar-nav ms-auto">
        <a class="nav-link" href="/admin-logout">Logout</a>
      </div>
    </div>
  </nav>

  <!-- Navigation Pills -->
  <ul class="nav nav-pills mb-4">
    <li class="nav-item">
      <a class="nav-link <% if (view === 'manage') { %>active<% } %>" href="/admin?view=manage">Manage Students</a>
    </li>
    <li class="nav-item">
      <a class="nav-link <% if (view === 'overview') { %>active<% } %>" href="/admin?view=overview">Student Overview</a>
    </li>
    <li class="nav-item">
      <a class="nav-link <% if (view === 'achievements') { %>active<% } %>" href="/admin?view=achievements">Achievement Manager</a>
    </li>
    <li class="nav-item">
      <a class="nav-link <% if (view === 'bulk') { %>active<% } %>" href="/admin?view=bulk">Bulk Actions</a>
    </li>
    <li class="nav-item">
  <a class="nav-link <% if (view === 'mission') { %>active<% } %>" href="/admin?view=mission">Mission Control</a>
</li>
  </ul>

  <% if (view === 'manage' || !view) { %>
    <!-- Student Management Section -->
    <div class="row">
      <div class="col-md-8">
        <h2>👥 Student Management</h2>
        
        <!-- Add Student Form -->
        <div class="card mb-4">
          <div class="card-header">
            <h5 class="text-white">Add New Crewmate</h5>
          </div>
          <div class="card-body">
            <form id="addStudentForm" onsubmit="handleAddStudent(event)">
              <div class="row g-3">
                <div class="col-md-4">
                  <label class="form-label text-white">Pseudonym</label>
                  <div class="input-group">
                    <input type="text" id="newPseudonym" name="pseudonym" class="form-control" placeholder="Auto-generated">
                    <button type="button" class="btn btn-outline-secondary" onclick="generatePseudonym()">🎲</button>
                  </div>
                </div>
                <div class="col-md-3">
                  <label class="form-label text-white">PIN</label>
                  <div class="input-group">
                    <input type="text" id="newPIN" name="pin" class="form-control" placeholder="Auto-generated">
                    <button type="button" class="btn btn-outline-secondary" onclick="generatePIN()">🎲</button>
                  </div>
                </div>
                <div class="col-md-3">
                  <label class="form-label text-white">Team</label>
                  <select name="team" class="form-select">
                    <option value="">Auto-balance</option>
                    <option value="Red">Red</option>
                    <option value="Blue">Blue</option>
                    <option value="Green">Green</option>
                    <option value="Yellow">Yellow</option>
                  </select>
                </div>
                <div class="col-md-2">
                  <label class="form-label">&nbsp;</label>
                  <button type="submit" class="btn btn-success w-100">Add</button>
                </div>
              </div>
            </form>
          </div>
        </div>

        <!-- Student Selection -->
        <form method="GET" action="/admin" class="mb-4">
          <input type="hidden" name="view" value="manage">
          <label for="pseudonym" class="form-label">Edit Student Achievements</label>
          <select name="pseudonym" id="pseudonym" class="form-select" onchange="this.form.submit()">
            <option value="">-- Choose a student --</option>
            <% students.forEach(s => { %>
              <option value="<%= s.pseudonym %>" <% if (selectedStudent && selectedStudent.pseudonym === s.pseudonym) { %>selected<% } %>>
                <%= s.pseudonym %> (<%= s.team %> Team) - <%= s.totalPoints %> pts
              </option>
            <% }) %>
          </select>
        </form>

        <!-- Student Achievement Editor -->
        <% if (selectedStudent) { %>
          <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h5>Editing: <%= selectedStudent.pseudonym %> (<%= selectedStudent.team %> Team)</h5>
              <button class="btn btn-sm btn-danger" onclick="deleteStudent('<%= selectedStudent.pseudonym %>')">Delete Student</button>
            </div>
            <div class="card-body text-white">
              <form method="POST" action="/admin">
                <input type="hidden" name="pseudonym" value="<%= selectedStudent.pseudonym %>">
                <div class="row">
                  <% achievements.forEach(a => { %>
                    <div class="col-md-6 mb-2">
                      <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="unlocked" value="<%= a.id %>" id="ach-<%= a.id %>"
                          <% if (unlocked.includes(a.id)) { %>checked<% } %>>
                        <label class="form-check-label" for="ach-<%= a.id %>">
                          <strong><%= a.title %></strong> (<%= a.points %> pts)<br>
                          <small><%= a.description %></small>
                        </label>
                      </div>
                    </div>
                  <% }) %>
                </div>
                <button class="btn btn-primary mt-3" type="submit">Save Changes</button>
              </form>
            </div>
          </div>
        <% } %>
      </div>

      <!-- Quick Stats Sidebar -->
      <div class="col-md-4 mt-4">
        <div class="card">
          <div class="card-header">
            <h5>📊 Quick Stats</h5>
          </div>
          <div class="card-body text-white">
            <p><strong>Total Students:</strong> <%= students.length %></p>
            <p><strong>Total Achievements:</strong> <%= achievements.length %></p>
            
            <h6>Team Distribution:</h6>
            <% 
              const teamCounts = {Red: 0, Blue: 0, Green: 0, Yellow: 0};
              students.forEach(s => teamCounts[s.team] = (teamCounts[s.team] || 0) + 1);
            %>
            <% Object.entries(teamCounts).forEach(([team, count]) => { %>
              <div class="d-flex justify-content-between">
                <span><%= team %>:</span>
                <span><%= count %></span>
              </div>
            <% }) %>
          </div>
        </div>
      </div>
    </div>
  <% } %>

  <% if (view === 'overview') { %>
    <!-- Student Overview Section -->
    <h2>👥 Student Overview</h2>
    
    <div class="row mb-3">
      <div class="col-md-6">
        <input type="text" id="searchStudents" class="form-control" placeholder="Search students...">
      </div>
      <div class="col-md-3">
        <select id="teamFilter" class="form-select">
          <option value="">All Teams</option>
          <option value="Red">Red Team</option>
          <option value="Blue">Blue Team</option>
          <option value="Green">Green Team</option>
          <option value="Yellow">Yellow Team</option>
        </select>
      </div>
    </div>

    <div class="table-container">
      <table class="table table-striped" id="studentsTable">
        <thead class="table-dark">
          <tr>
            <th>Pseudonym</th>
            <th>Team</th>
            <th>Total Points</th>
            <th>Achievements</th>
            <th>Progress</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% students.forEach(student => { %>
            <tr data-team="<%= student.team %>" data-pseudonym="<%= student.pseudonym.toLowerCase() %>">
              <td><%= student.pseudonym %></td>
              <td><span class="badge bg-secondary"><%= student.team %></span></td>
              <td><%= student.totalPoints %></td>
              <td><%= student.achievementCount %> / <%= achievements.length %></td>
              <td>
                <div class="progress">
                  <div class="progress-bar" data-progress="<%= achievements.length > 0 ? Math.round((student.achievementCount / achievements.length) * 100) : 0 %>">
                    <%= achievements.length > 0 ? Math.round((student.achievementCount / achievements.length) * 100) : 0 %>%
                  </div>
                </div>
              </td>
              <td>
                <a href="/admin?view=manage&pseudonym=<%= student.pseudonym %>" class="btn btn-sm btn-primary">Edit</a>
                <button class="btn btn-sm btn-danger" onclick="deleteStudent('<%= student.pseudonym %>')">Delete</button>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  <% } %>

  <% if (view === 'achievements') { %>
    <!-- Achievement Management Section -->
    <h2>🏆 Achievement Manager</h2>
    
    <div class="row">
      <div class="col-md-8">
        <div class="card mb-4">
          <div class="card-header">
            <h5>Create New Achievement</h5>
          </div>
          <div class="card-body">
            <form id="addAchievementForm">
              <div class="row g-3 text-white">
                <div class="col-md-6">
                  <label class="form-label">Title</label>
                  <input type="text" name="title" class="form-control" required>
                </div>
                <div class="col-md-3">
                  <label class="form-label">Points</label>
                  <input type="number" name="points" class="form-control" value="10" required>
                </div>
                <div class="col-md-3">
                  <label class="form-label">&nbsp;</label>
                  <button type="submit" class="btn btn-success w-100">Create</button>
                </div>
                <div class="col-12">
                  <label class="form-label">Description</label>
                  <textarea name="description" class="form-control" rows="2" required></textarea>
                </div>
                <div class="col-12">
                  <label class="form-label">Image URL (optional)</label>
                  <input type="url" name="image" class="form-control" placeholder="https://example.com/image.jpg">
                </div>
              </div>
            </form>
          </div>
        </div>

        <div class="row text-white">
          <% achievements.forEach(achievement => { %>
            <div class="col-md-6 mb-3">
              <div class="card">
                <img src="<%= achievement.image %>" class="card-img-top" alt="<%= achievement.title %>" style="height: 150px; object-fit: cover;">
                <div class="card-body">
                  <h6 class="card-title"><%= achievement.title %></h6>
                  <p class="card-text text-white"><%= achievement.description %></p>
                  <div class="d-flex justify-content-between align-items-center">
                    <span class="badge bg-success"><%= achievement.points %> pts</span>
                    <button class="btn btn-sm btn-danger" onclick="deleteAchievement('<%= achievement.id %>')">Delete</button>
                  </div>
                </div>
              </div>
            </div>
          <% }) %>
        </div>
      </div>

      <div class="col-md-4">
        <div class="card">
          <div class="card-header">
            <h5>Achievement Stats</h5>
          </div>
          <div class="card-body text-white">
            <% achievements.forEach(achievement => { %>
              <div class="mb-2">
                <strong><%= achievement.title %></strong><br>
                <small class=""><%= achievement.unlockedCount %> / <%= students.length %> students</small>
                <div class="progress mb-2">
                  <div class="progress-bar" data-progress="<%= students.length > 0 ? Math.round((achievement.unlockedCount / students.length) * 100) : 0 %>"></div>
                </div>
              </div>
            <% }) %>
          </div>
        </div>
      </div>
    </div>
  <% } %>

  <% if (view === 'bulk') { %>
    <!-- Bulk Actions Section -->
    <h2>⚡ Bulk Actions</h2>
    
    <div class="row">
      <div class="col-md-8">
        <div class="card">
          <div class="card-header">
            <h5>Bulk Assign Achievement</h5>
          </div>
          <div class="card-body text-white">
            <form method="POST" action="/admin" class="row g-3">
              <input type="hidden" name="bulkAssign" value="1">
              
              <div class="col-md-6">
                <label for="achievementId" class="form-label">Achievement</label>
                <select name="achievementId" class="form-select" required>
                  <option value="">-- Select Achievement --</option>
                  <% achievements.forEach(a => { %>
                    <option value="<%= a.id %>"><%= a.title %> (<%= a.points %> pts)</option>
                  <% }) %>
                </select>
              </div>
              
              <div class="col-md-4">
                <label for="team" class="form-label">Target</label>
                <select name="team" class="form-select" required>
                  <option value="All">All Teams</option>
                  <% 
                    const teams = [...new Set(students.map(s => s.team))].sort();
                    teams.forEach(t => { 
                  %>
                    <option value="<%= t %>"><%= t %> Team</option>
                  <% }) %>
                </select>
              </div>
              
              <div class="col-md-2 d-flex align-items-end">
                <button type="submit" class="btn btn-warning w-100">Assign</button>
              </div>
            </form>
          </div>
        </div>
        
        <div class="card mt-4">
          <div class="card-header">
            <h5>Bulk Student Import</h5>
          </div>
          <div class="card-body text-white">
            <form id="bulkImportForm">
              <div class="row g-3">
                <div class="col-12">
                  <label class="form-label">Paste Pseudonyms (one per line)</label>
                  <textarea id="bulkPseudonyms" class="form-control" rows="6" placeholder="Nebula&#10;Quasar&#10;Pulsar&#10;..." required></textarea>
                </div>
                <div class="col-md-6">
                  <label class="form-label">Assign to Team</label>
                  <select id="bulkTeam" class="form-select" required>
                    <option value="">-- Select Team --</option>
                    <option value="Red">Red Team</option>
                    <option value="Blue">Blue Team</option>
                    <option value="Green">Green Team</option>
                    <option value="Yellow">Yellow Team</option>
                  </select>
                </div>
                <div class="col-md-6 d-flex align-items-end">
                  <button type="submit" class="btn btn-info w-100">Import Students</button>
                </div>
              </div>
            </form>
            <div id="bulkImportResults" class="mt-3" style="display: none;">
              <div class="alert alert-info">
                <h6>Import Results</h6>
                <div id="importSummary"></div>
                <small class="text-muted">PINs have been saved to the plaintext file for admin export.</small>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="col-md-4">
        <div class="card">
          <div class="card-header">
            <h5>⚠️ Danger Zone</h5>
          </div>
          <div class="card-body">
            <button class="btn btn-outline-danger w-100 mb-2" onclick="confirmResetAllProgress()">
              Reset All Progress
            </button>
            <small class="text-white">This will remove all achievements from all students but keep the students.</small>
            
            <hr>

            <button class="btn btn-outline-primary w-100 mb-2" onclick="exportPINs()">
              Export Plaintext PINs
            </button>
            <small class="text-white d-block mb-3">Downloads a JSON file of all current plaintext PINs for one-time admin export.</small>
            
            <button class="btn btn-outline-warning w-100" onclick="clearPINs()">
              Clear Plaintext PINs
            </button>
            <small class="text-white d-block mt-1">Deletes the plaintext PINs file. This action is irreversible.</small>
          </div>
        </div>
      </div>
    </div>
  <% } %>

  <% if (view === 'mission') { %>
  <!-- Mission Control Section -->
  <h2>🚀 Mission Control</h2>
  
  <div class="row">
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">
          <h5>Ship AI Configuration</h5>
        </div>
        <div class="card-body">
          <form id="missionForm">
            <div class="row g-3 text-white">
              <div class="col-12">
                <label class="form-label">Current Mission</label>
                <input type="text" id="currentMission" class="form-control" 
                       placeholder="e.g., Explore the Andromeda Sector and collect stellar data">
              </div>
              
              <div class="col-12">
                <label class="form-label">Mission Briefing</label>
                <textarea id="missionBriefing" class="form-control" rows="3" 
                          placeholder="Describe the overall mission and objectives for students"></textarea>
              </div>
              
              <div class="col-12">
                <label class="form-label">Ship Status</label>
                <input type="text" id="shipStatus" class="form-control" 
                       placeholder="e.g., All systems operational. Ready for deep space exploration.">
              </div>
              
              <div class="col-12">
                <button type="submit" class="btn btn-success">Update Mission Parameters</button>
                <button type="button" class="btn btn-secondary ms-2" onclick="loadMissionData()">Reload Current Data</button>
              </div>
            </div>
          </form>
          
          <div id="missionUpdateStatus" class="mt-3" style="display: none;"></div>
        </div>
      </div>
      
      <div class="card mt-4">
        <div class="card-header">
          <h5>AI Safety & Content Filters</h5>
        </div>
        <div class="card-body text-white">
          <div class="alert alert-info">
            <h6>🛡️ Current Safety Measures:</h6>
            <ul class="mb-0">
              <li><strong>Content Filter:</strong> Blocks inappropriate language and topics</li>
              <li><strong>Topic Restriction:</strong> Only discusses space, astronomy, and current mission</li>
              <li><strong>Age Appropriate:</strong> Language suitable for 5th grade students (age 10-11)</li>
              <li><strong>Response Limit:</strong> Maximum 120 words per response</li>
              <li><strong>Forbidden Topics:</strong> Violence, personal information, non-educational content</li>
            </ul>
          </div>
          
          <div class="mt-3">
            <h6>Safe Topics the AI will discuss:</h6>
            <div class="row">
              <div class="col-md-6">
                <ul class="text-success">
                  <li>Planets and moons</li>
                  <li>Stars and galaxies</li>
                  <li>Spacecraft and rockets</li>
                  <li>Astronauts and space missions</li>
                  <li>Solar system facts</li>
                </ul>
              </div>
              <div class="col-md-6">
                <ul class="text-success">
                  <li>Space exploration</li>
                  <li>Astronomy concepts</li>
                  <li>Current mission objectives</li>
                  <li>Space technology</li>
                  <li>Fun space facts</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="col-md-4">
      <div class="card">
        <div class="card-header">
          <h5>AI Status Monitor</h5>
        </div>
        <div class="card-body text-white">
          <div class="d-flex align-items-center mb-3">
            <div class="status-indicator me-2" id="aiStatusIndicator"></div>
            <span id="aiStatusText">Checking AI status...</span>
          </div>
          
          <button class="btn btn-outline-info w-100 mb-3" onclick="testAiConnection()">Test AI Connection</button>
          
          <div id="aiTestResult" style="display: none;"></div>
          
          <hr>
          
          <h6>Quick Test Messages:</h6>
          <div class="d-grid gap-2">
            <button class="btn btn-sm btn-outline-primary" onclick="sendTestMessage('What is Mars?')">
              Test: "What is Mars?"
            </button>
            <button class="btn btn-sm btn-outline-primary" onclick="sendTestMessage('Tell me about our mission')">
              Test: "Tell me about our mission"
            </button>
            <button class="btn btn-sm btn-outline-warning" onclick="sendTestMessage('What is homework?')">
              Test: Forbidden Topic
            </button>
          </div>
        </div>
      </div>
      
      <div class="card mt-3">
        <div class="card-header">
          <h5>Usage Statistics</h5>
        </div>
        <div class="card-body text-white">
          <p><small class="text-muted">Chat usage statistics would appear here when implemented:</small></p>
          <ul class="text-muted">
            <li>Total conversations today</li>
            <li>Most active students</li>
            <li>Popular topics</li>
            <li>Blocked content attempts</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
<% } %>

<script>
// Add this JavaScript to the existing script section in admin.ejs

// Mission Control Functions
async function loadMissionData() {
  try {
    const response = await fetch('/admin/mission');
    const data = await response.json();
    
    document.getElementById('currentMission').value = data.currentMission || '';
    document.getElementById('missionBriefing').value = data.missionBriefing || '';
    document.getElementById('shipStatus').value = data.shipStatus || '';
    
    showMissionStatus('Mission data loaded successfully', 'success');
  } catch (error) {
    console.error('Error loading mission data:', error);
    showMissionStatus('Error loading mission data', 'error');
  }
}

// Mission form submission
document.getElementById('missionForm')?.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const formData = {
    currentMission: document.getElementById('currentMission').value,
    missionBriefing: document.getElementById('missionBriefing').value,
    shipStatus: document.getElementById('shipStatus').value
  };
  
  try {
    const response = await fetch('/admin/mission', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });
    
    const result = await response.json();
    
    if (result.success) {
      showMissionStatus('Mission parameters updated successfully! Students will see the new information when they chat with the AI.', 'success');
    } else {
      showMissionStatus('Error updating mission parameters', 'error');
    }
  } catch (error) {
    console.error('Error updating mission:', error);
    showMissionStatus('Error updating mission parameters', 'error');
  }
});

function showMissionStatus(message, type) {
  const statusDiv = document.getElementById('missionUpdateStatus');
  statusDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'}`;
  statusDiv.textContent = message;
  statusDiv.style.display = 'block';
  
  setTimeout(() => {
    statusDiv.style.display = 'none';
  }, 5000);
}

// AI Connection Testing
async function testAiConnection() {
  const indicator = document.getElementById('aiStatusIndicator');
  const statusText = document.getElementById('aiStatusText');
  const resultDiv = document.getElementById('aiTestResult');
  
  indicator.className = 'status-indicator testing';
  statusText.textContent = 'Testing AI connection...';
  resultDiv.style.display = 'none';
  
  try {
    const response = await fetch('/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: 'System test: Are you operational?',
        pseudonym: 'Admin Test'
      })
    });
    
    const data = await response.json();
    
    if (data.response) {
      indicator.className = 'status-indicator online';
      statusText.textContent = 'AI Online - Connection Successful';
      resultDiv.innerHTML = `<div class="alert alert-success"><strong>AI Response:</strong> ${data.response}</div>`;
      resultDiv.style.display = 'block';
    } else {
      throw new Error('No response from AI');
    }
  } catch (error) {
    indicator.className = 'status-indicator offline';
    statusText.textContent = 'AI Offline - Connection Failed';
    resultDiv.innerHTML = `<div class="alert alert-danger"><strong>Error:</strong> ${error.message}</div>`;
    resultDiv.style.display = 'block';
  }
}

async function sendTestMessage(message) {
  const resultDiv = document.getElementById('aiTestResult');
  resultDiv.innerHTML = '<div class="alert alert-info">Sending test message...</div>';
  resultDiv.style.display = 'block';
  
  try {
    const response = await fetch('/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: message,
        pseudonym: 'Admin Test'
      })
    });
    
    const data = await response.json();
    
    resultDiv.innerHTML = `
      <div class="alert alert-info">
        <strong>Test Message:</strong> "${message}"<br>
        <strong>AI Response:</strong> ${data.response || 'No response'}
      </div>
    `;
  } catch (error) {
    resultDiv.innerHTML = `<div class="alert alert-danger"><strong>Error:</strong> ${error.message}</div>`;
  }
}

// Load mission data when the mission tab is loaded
document.addEventListener('DOMContentLoaded', function() {
  if (window.location.search.includes('view=mission')) {
    loadMissionData();
    testAiConnection();
  }
});
</script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Set progress bar widths using JavaScript instead of inline styles
    document.addEventListener('DOMContentLoaded', function() {
      const progressBars = document.querySelectorAll('.progress-bar[data-progress]');
      progressBars.forEach(bar => {
        const progress = bar.getAttribute('data-progress');
        bar.style.width = progress + '%';
      });
    });

    // Generate pseudonym
    async function generatePseudonym() {
      const response = await fetch('/api/generate-pseudonym');
      const data = await response.json();
      document.getElementById('newPseudonym').value = data.pseudonym;
    }

    // Generate PIN
    async function generatePIN() {
      const response = await fetch('/api/generate-pin');
      const data = await response.json();
      document.getElementById('newPIN').value = data.pin;
    }

    // Add student
    function handleAddStudent(e) {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = {
        customPseudonym: formData.get('pseudonym'),
        pin: formData.get('pin'),
        team: formData.get('team')
      };
      
      fetch('/admin/add-student', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      })
      .then(res => res.json())
      .then(result => {
        if (result.success) {
          location.reload();
        } else {
          alert('Error: ' + result.error);
        }
      })
      .catch(err => {
        alert('Error adding student: ' + err.message);
      });
    }

    // Delete student
    async function deleteStudent(pseudonym) {
      if (confirm(`Are you sure you want to delete ${pseudonym}? This action cannot be undone.`)) {
        const response = await fetch('/admin/delete-student', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ pseudonym })
        });
        
        const result = await response.json();
        if (result.success) {
          location.reload();
        }
      }
    }

    // Add achievement
    document.getElementById('addAchievementForm')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);
      
      const response = await fetch('/admin/add-achievement', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      
      const result = await response.json();
      if (result.success) {
        location.reload();
      }
    });

    // Delete achievement
    async function deleteAchievement(id) {
      if (confirm('Are you sure you want to delete this achievement? It will be removed from all students.')) {
        const response = await fetch('/admin/delete-achievement', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id })
        });
        
        const result = await response.json();
        if (result.success) {
          location.reload();
        }
      }
    }

    // Search and filter functionality
    document.getElementById('searchStudents')?.addEventListener('input', filterStudents);
    document.getElementById('teamFilter')?.addEventListener('change', filterStudents);

    function filterStudents() {
      const searchTerm = document.getElementById('searchStudents')?.value.toLowerCase() || '';
      const teamFilter = document.getElementById('teamFilter')?.value || '';
      const rows = document.querySelectorAll('#studentsTable tbody tr');
      
      rows.forEach(row => {
        const pseudonym = row.dataset.pseudonym;
        const team = row.dataset.team;
        const matchesSearch = pseudonym.includes(searchTerm);
        const matchesTeam = !teamFilter || team === teamFilter;
        
        row.style.display = matchesSearch && matchesTeam ? '' : 'none';
      });
    }

    // Bulk import students
    document.getElementById('bulkImportForm')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const pseudonyms = document.getElementById('bulkPseudonyms').value;
      const team = document.getElementById('bulkTeam').value;
      
      if (!team) {
        alert('Please select a team');
        return;
      }
      
      try {
        const response = await fetch('/admin/bulk-import-students', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ pseudonyms, team })
        });
        
        const result = await response.json();
        if (result.success) {
          const resultsDiv = document.getElementById('bulkImportResults');
          const summaryDiv = document.getElementById('importSummary');
          
          let html = `<p><strong>${result.added} students added to ${team} Team!</strong></p>`;
          
          if (result.errors && result.errors.length > 0) {
            html += '<p class="text-danger">Errors:</p><ul>';
            result.errors.forEach(err => {
              html += `<li>${err}</li>`;
            });
            html += '</ul>';
          }
          
          summaryDiv.innerHTML = html;
          resultsDiv.style.display = 'block';
          
          // Clear form
          document.getElementById('bulkPseudonyms').value = '';
          document.getElementById('bulkTeam').value = '';
          
          // Reload after 3 seconds
          setTimeout(() => location.reload(), 3000);
        } else {
          alert('Error: ' + result.error);
        }
      } catch (err) {
        alert('Error importing students: ' + err.message);
      }
    });

    // Reset all progress
    function confirmResetAllProgress() {
      if (confirm('Are you sure you want to reset ALL student progress? This will remove all achievements from all students but keep the students themselves.')) {
        if (confirm('This action cannot be undone. Are you absolutely sure?')) {
          // Implementation would go here
          alert('Feature not yet implemented. Add this to your backend if needed.');
        }
      }
    }

    async function exportPINs() {
      if (!confirm('Export all plaintext PINs? This will download a JSON file containing sensitive data.')) return;

      try {
        const response = await fetch('/admin/export-pins');
        if (!response.ok) throw new Error('Failed to export PINs.');

        const data = await response.json();
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'plaintext-pins-' + new Date().toISOString().split('T')[0] + '.json';
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      } catch (err) {
        alert('Error exporting PINs: ' + err.message);
      }
    }

    async function clearPINs() {
      if (!confirm('Are you sure you want to CLEAR all plaintext PINs? This cannot be undone.')) return;

      try {
        const response = await fetch('/admin/clear-pins', { method: 'POST' });
        const result = await response.json();
        
        if (result.success) {
          alert('Plaintext PINs cleared successfully.');
        } else {
          throw new Error(result.error || 'Failed to clear PINs');
        }
      } catch (err) {
        alert('Error clearing PINs: ' + err.message);
      }
    }
  </script>
</body>
</html>