<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Valiant Inquiry - Crew Control Center</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/style.css">
  <style>
    .nav-pills .nav-link.active { background-color: #0d6efd; }
    .table-container { max-height: 400px; overflow-y: auto; }
    .student-card { transition: all 0.3s ease; }
    .student-card:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
  </style>
</head>
<body class="container-fluid mt-3">
  <nav class="navbar navbar-expand-lg navbar-dark mb-4">
    <div class="container-fluid">
      <span class="navbar-brand">üöÄ Crew Control Center</span>
      <div class="navbar-nav ms-auto">
        <a class="nav-link" href="/admin-logout">Logout</a>
      </div>
    </div>
  </nav>

  <!-- Navigation Pills -->
  <ul class="nav nav-pills mb-4">
    <li class="nav-item">
      <a class="nav-link <% if (view === 'manage') { %>active<% } %>" href="/admin?view=manage">Manage Students</a>
    </li>
    <li class="nav-item">
      <a class="nav-link <% if (view === 'overview') { %>active<% } %>" href="/admin?view=overview">Student Overview</a>
    </li>
    <li class="nav-item">
      <a class="nav-link <% if (view === 'achievements') { %>active<% } %>" href="/admin?view=achievements">Achievement Manager</a>
    </li>
    <li class="nav-item">
      <a class="nav-link <% if (view === 'bulk') { %>active<% } %>" href="/admin?view=bulk">Bulk Actions</a>
    </li>
  </ul>

  <% if (view === 'manage' || !view) { %>
    <!-- Student Management Section -->
    <div class="row">
      <div class="col-md-8">
        <h2>üë• Student Management</h2>
        
        <!-- Add Student Form -->
        <div class="card mb-4">
          <div class="card-header">
            <h5>Add New Crewmate</h5>
          </div>
          <div class="card-body">
            <form id="addStudentForm">
              <div class="row g-3">
                <div class="col-md-4">
                  <label class="form-label">Pseudonym</label>
                  <div class="input-group">
                    <input type="text" id="newPseudonym" name="pseudonym" class="form-control" placeholder="Auto-generated">
                    <button type="button" class="btn btn-outline-secondary" onclick="generatePseudonym()">üé≤</button>
                  </div>
                </div>
                <div class="col-md-3">
                  <label class="form-label">PIN</label>
                  <div class="input-group">
                    <input type="text" id="newPIN" name="pin" class="form-control" placeholder="Auto-generated">
                    <button type="button" class="btn btn-outline-secondary" onclick="generatePIN()">üé≤</button>
                  </div>
                </div>
                <div class="col-md-3">
                  <label class="form-label">Team</label>
                  <select name="team" class="form-select">
                    <option value="">Auto-balance</option>
                    <option value="Red">Red</option>
                    <option value="Blue">Blue</option>
                    <option value="Green">Green</option>
                    <option value="Yellow">Yellow</option>
                  </select>
                </div>
                <div class="col-md-2">
                  <label class="form-label">&nbsp;</label>
                  <button type="submit" class="btn btn-success w-100">Add</button>
                </div>
              </div>
            </form>
          </div>
        </div>

        <!-- Student Selection -->
        <form method="GET" action="/admin" class="mb-4">
          <input type="hidden" name="view" value="manage">
          <label for="pseudonym" class="form-label">Edit Student Achievements</label>
          <select name="pseudonym" id="pseudonym" class="form-select" onchange="this.form.submit()">
            <option value="">-- Choose a student --</option>
            <% students.forEach(s => { %>
              <option value="<%= s.pseudonym %>" <% if (selectedStudent && selectedStudent.pseudonym === s.pseudonym) { %>selected<% } %>>
                <%= s.pseudonym %> (<%= s.team %> Team) - <%= s.totalPoints %> pts
              </option>
            <% }) %>
          </select>
        </form>

        <!-- Student Achievement Editor -->
        <% if (selectedStudent) { %>
          <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h5>Editing: <%= selectedStudent.pseudonym %> (<%= selectedStudent.team %> Team)</h5>
              <button class="btn btn-sm btn-danger" onclick="deleteStudent('<%= selectedStudent.pseudonym %>')">Delete Student</button>
            </div>
            <div class="card-body text-white">
              <form method="POST" action="/admin">
                <input type="hidden" name="pseudonym" value="<%= selectedStudent.pseudonym %>">
                <div class="row">
                  <% achievements.forEach(a => { %>
                    <div class="col-md-6 mb-2">
                      <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="unlocked" value="<%= a.id %>" id="ach-<%= a.id %>"
                          <% if (unlocked.includes(a.id)) { %>checked<% } %>>
                        <label class="form-check-label" for="ach-<%= a.id %>">
                          <strong><%= a.title %></strong> (<%= a.points %> pts)<br>
                          <small class="text-muted"><%= a.description %></small>
                        </label>
                      </div>
                    </div>
                  <% }) %>
                </div>
                <button class="btn btn-primary mt-3" type="submit">Save Changes</button>
              </form>
            </div>
          </div>
        <% } %>
      </div>

      <!-- Quick Stats Sidebar -->
      <div class="col-md-4 mt-4">
        <div class="card">
          <div class="card-header">
            <h5>üìä Quick Stats</h5>
          </div>
          <div class="card-body text-white">
            <p><strong>Total Students:</strong> <%= students.length %></p>
            <p><strong>Total Achievements:</strong> <%= achievements.length %></p>
            
            <h6>Team Distribution:</h6>
            <% 
              const teamCounts = {Red: 0, Blue: 0, Green: 0, Yellow: 0};
              students.forEach(s => teamCounts[s.team] = (teamCounts[s.team] || 0) + 1);
            %>
            <% Object.entries(teamCounts).forEach(([team, count]) => { %>
              <div class="d-flex justify-content-between">
                <span><%= team %>:</span>
                <span><%= count %></span>
              </div>
            <% }) %>
          </div>
        </div>
      </div>
    </div>
  <% } %>

  <% if (view === 'overview') { %>
    <!-- Student Overview Section -->
    <h2>üë• Student Overview</h2>
    
    <div class="row mb-3">
      <div class="col-md-6">
        <input type="text" id="searchStudents" class="form-control" placeholder="Search students...">
      </div>
      <div class="col-md-3">
        <select id="teamFilter" class="form-select">
          <option value="">All Teams</option>
          <option value="Red">Red Team</option>
          <option value="Blue">Blue Team</option>
          <option value="Green">Green Team</option>
          <option value="Yellow">Yellow Team</option>
        </select>
      </div>
    </div>

    <div class="table-container">
      <table class="table table-striped" id="studentsTable">
        <thead class="table-dark">
          <tr>
            <th>Pseudonym</th>
            <th>Team</th>
            <th>Total Points</th>
            <th>Achievements</th>
            <th>Progress</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% students.forEach(student => { %>
            <tr data-team="<%= student.team %>" data-pseudonym="<%= student.pseudonym.toLowerCase() %>">
              <td><%= student.pseudonym %></td>
              <td><span class="badge bg-secondary"><%= student.team %></span></td>
              <td><%= student.totalPoints %></td>
              <td><%= student.achievementCount %> / <%= achievements.length %></td>
              <td>
                <div class="progress">
                  <div class="progress-bar" data-progress="<%= achievements.length > 0 ? Math.round((student.achievementCount / achievements.length) * 100) : 0 %>">
                    <%= achievements.length > 0 ? Math.round((student.achievementCount / achievements.length) * 100) : 0 %>%
                  </div>
                </div>
              </td>
              <td>
                <a href="/admin?view=manage&pseudonym=<%= student.pseudonym %>" class="btn btn-sm btn-primary">Edit</a>
                <button class="btn btn-sm btn-danger" onclick="deleteStudent('<%= student.pseudonym %>')">Delete</button>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  <% } %>

  <% if (view === 'achievements') { %>
    <!-- Achievement Management Section -->
    <h2>üèÜ Achievement Manager</h2>
    
    <div class="row">
      <div class="col-md-8">
        <div class="card mb-4">
          <div class="card-header">
            <h5>Create New Achievement</h5>
          </div>
          <div class="card-body">
            <form id="addAchievementForm">
              <div class="row g-3">
                <div class="col-md-6">
                  <label class="form-label">Title</label>
                  <input type="text" name="title" class="form-control" required>
                </div>
                <div class="col-md-3">
                  <label class="form-label">Points</label>
                  <input type="number" name="points" class="form-control" value="10" required>
                </div>
                <div class="col-md-3">
                  <label class="form-label">&nbsp;</label>
                  <button type="submit" class="btn btn-success w-100">Create</button>
                </div>
                <div class="col-12">
                  <label class="form-label">Description</label>
                  <textarea name="description" class="form-control" rows="2" required></textarea>
                </div>
                <div class="col-12">
                  <label class="form-label">Image URL (optional)</label>
                  <input type="url" name="image" class="form-control" placeholder="https://example.com/image.jpg">
                </div>
              </div>
            </form>
          </div>
        </div>

        <div class="row">
          <% achievements.forEach(achievement => { %>
            <div class="col-md-6 mb-3">
              <div class="card">
                <img src="<%= achievement.image %>" class="card-img-top" alt="<%= achievement.title %>" style="height: 150px; object-fit: cover;">
                <div class="card-body">
                  <h6 class="card-title"><%= achievement.title %></h6>
                  <p class="card-text"><%= achievement.description %></p>
                  <div class="d-flex justify-content-between align-items-center">
                    <span class="badge bg-success"><%= achievement.points %> pts</span>
                    <button class="btn btn-sm btn-danger" onclick="deleteAchievement('<%= achievement.id %>')">Delete</button>
                  </div>
                </div>
              </div>
            </div>
          <% }) %>
        </div>
      </div>

     <!-- Replace the Achievement Stats section in your admin.ejs file (around line 280-290) with this: -->
<div class="col-md-4">
  <div class="card">
    <div class="card-header">
      <h5>Achievement Stats</h5>
    </div>
    <div class="card-body text-white">
      <% achievements.forEach(achievement => { %>
        <div class="mb-2">
          <strong><%= achievement.title %></strong><br>
          <small class="text-muted"><%= achievement.unlockedCount %> / <%= students.length %> students</small>
          <div class="progress mb-2">
            <div class="progress-bar" data-progress="<%= students.length > 0 ? Math.round((achievement.unlockedCount / students.length) * 100) : 0 %>"></div>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
</div>
    </div>
  <% } %>

  <% if (view === 'bulk') { %>
    <!-- Bulk Actions Section -->
    <h2>‚ö° Bulk Actions</h2>
    
    <div class="row">
      <div class="col-md-8">
        <div class="card">
          <div class="card-header">
            <h5>Bulk Assign Achievement</h5>
          </div>
          <div class="card-body">
            <form method="POST" action="/admin" class="row g-3">
              <input type="hidden" name="bulkAssign" value="1">
              
              <div class="col-md-6">
                <label for="achievementId" class="form-label">Achievement</label>
                <select name="achievementId" class="form-select" required>
                  <option value="">-- Select Achievement --</option>
                  <% achievements.forEach(a => { %>
                    <option value="<%= a.id %>"><%= a.title %> (<%= a.points %> pts)</option>
                  <% }) %>
                </select>
              </div>
              
              <div class="col-md-4">
                <label for="team" class="form-label">Target</label>
                <select name="team" class="form-select" required>
                  <option value="All">All Teams</option>
                  <% 
                    const teams = [...new Set(students.map(s => s.team))].sort();
                    teams.forEach(t => { 
                  %>
                    <option value="<%= t %>"><%= t %> Team</option>
                  <% }) %>
                </select>
              </div>
              
              <div class="col-md-2 d-flex align-items-end">
                <button type="submit" class="btn btn-warning w-100">Assign</button>
              </div>
            </form>
          </div>
        </div>
        
        <div class="card mt-4">
          <div class="card-header">
            <h5>Bulk Student Creation</h5>
          </div>
          <div class="card-body">
            <form id="bulkCreateForm">
              <div class="row g-3">
                <div class="col-md-4">
                  <label class="form-label">Number of Students</label>
                  <input type="number" id="bulkCount" class="form-control" value="5" min="1" max="50">
                </div>
                <div class="col-md-4 mt-4">
                  <label class="form-label">Theme</label>
                  <select id="bulkTheme" class="form-select">
                    <option value="space">Space</option>
                    <option value="ocean">Ocean</option>
                    <option value="forest">Forest</option>
                  </select>
                </div>
                <div class="col-md-4 d-flex align-items-end">
                  <button type="submit" class="btn btn-info w-100 mb-1">Create Students</button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>

      <div class="col-md-4">
        <div class="card">
          <div class="card-header">
            <h5>‚ö†Ô∏è Danger Zone</h5>
          </div>
          <div class="card-body">
  <button class="btn btn-outline-danger w-100 mb-2" onclick="confirmResetAllProgress()">
    Reset All Progress
  </button>
  <small class="text-muted">This will remove all achievements from all students but keep the students.</small>
  
  <hr>

  <button class="btn btn-outline-primary w-100 mb-2" onclick="exportPINs()">
    Export Plaintext PINs
  </button>
  <small class="text-muted d-block mb-3">Downloads a JSON file of all current plaintext PINs for one-time admin export.</small>
  
  <button class="btn btn-outline-warning w-100" onclick="clearPINs()">
    Clear Plaintext PINs
  </button>
  <small class="text-muted d-block mt-1">Deletes the plaintext PINs file. This action is irreversible.</small>
</div>


        </div>
      </div>
    </div>
  <% } %>

  <!-- Enhanced Dashboard -->
  <% if (view === 'dashboard') { %>
    <h2>üìä Dashboard</h2>
    
    <div class="row">
      <div class="col-md-3 mb-3">
        <div class="card text-center">
          <div class="card-body">
            <h5 class="card-title">Total Students</h5>
            <h2 class="text-primary"><%= students.length %></h2>
          </div>
        </div>
      </div>
      <div class="col-md-3 mb-3">
        <div class="card text-center">
          <div class="card-body">
            <h5 class="card-title">Total Points Earned</h5>
            <h2 class="text-success"><%= students.reduce((sum, s) => sum + s.totalPoints, 0) %></h2>
          </div>
        </div>
      </div>
      <div class="col-md-3 mb-3">
        <div class="card text-center">
          <div class="card-body">
            <h5 class="card-title">Achievements</h5>
            <h2 class="text-warning"><%= achievements.length %></h2>
          </div>
        </div>
      </div>
      <div class="col-md-3 mb-3">
        <div class="card text-center">
          <div class="card-body">
            <h5 class="card-title">Avg Progress</h5>
            <% 
              const avgProgress = students.length > 0 && achievements.length > 0 ? 
                Math.round(students.reduce((sum, s) => sum + s.achievementCount, 0) / students.length / achievements.length * 100) : 0;
            %>
            <h2 class="text-info"><%= avgProgress %>%</h2>
          </div>
        </div>
      </div>
    </div>
  <% } %>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Set progress bar widths using JavaScript instead of inline styles
    document.addEventListener('DOMContentLoaded', function() {
      const progressBars = document.querySelectorAll('.progress-bar[data-progress]');
      progressBars.forEach(bar => {
        const progress = bar.getAttribute('data-progress');
        bar.style.width = progress + '%';
      });
    });

    // Generate pseudonym
    async function generatePseudonym() {
      const response = await fetch('/api/generate-pseudonym');
      const data = await response.json();
      document.getElementById('newPseudonym').value = data.pseudonym;
    }

    // Generate PIN
    async function generatePIN() {
      const response = await fetch('/api/generate-pin');
      const data = await response.json();
      document.getElementById('newPIN').value = data.pin;
    }

    // Add student
    document.getElementById('addStudentForm')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);
      
      // Use custom pseudonym if provided, otherwise leave empty for auto-generation
      data.customPseudonym = data.pseudonym;
      
      const response = await fetch('/admin/add-student', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      
      const result = await response.json();
      if (result.success) {
        location.reload();
      } else {
        alert('Error: ' + result.error);
      }
    });

    // Delete student
    async function deleteStudent(pseudonym) {
      if (confirm(`Are you sure you want to delete ${pseudonym}? This action cannot be undone.`)) {
        const response = await fetch('/admin/delete-student', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ pseudonym })
        });
        
        const result = await response.json();
        if (result.success) {
          location.reload();
        }
      }
    }

    // Add achievement
    document.getElementById('addAchievementForm')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);
      
      const response = await fetch('/admin/add-achievement', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      
      const result = await response.json();
      if (result.success) {
        location.reload();
      }
    });

    // Delete achievement
    async function deleteAchievement(id) {
      if (confirm('Are you sure you want to delete this achievement? It will be removed from all students.')) {
        const response = await fetch('/admin/delete-achievement', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id })
        });
        
        const result = await response.json();
        if (result.success) {
          location.reload();
        }
      }
    }

    // Search and filter functionality
    document.getElementById('searchStudents')?.addEventListener('input', filterStudents);
    document.getElementById('teamFilter')?.addEventListener('change', filterStudents);

    function filterStudents() {
      const searchTerm = document.getElementById('searchStudents')?.value.toLowerCase() || '';
      const teamFilter = document.getElementById('teamFilter')?.value || '';
      const rows = document.querySelectorAll('#studentsTable tbody tr');
      
      rows.forEach(row => {
        const pseudonym = row.dataset.pseudonym;
        const team = row.dataset.team;
        const matchesSearch = pseudonym.includes(searchTerm);
        const matchesTeam = !teamFilter || team === teamFilter;
        
        row.style.display = matchesSearch && matchesTeam ? '' : 'none';
      });
    }

    // Bulk create students
    document.getElementById('bulkCreateForm')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const count = parseInt(document.getElementById('bulkCount').value);
      const theme = document.getElementById('bulkTheme').value;
      
      if (confirm(`Create ${count} students with ${theme} theme?`)) {
        for (let i = 0; i < count; i++) {
          const response = await fetch('/admin/add-student', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ theme })
          });
          
          if (!response.ok) {
            alert('Error creating student ' + (i + 1));
            break;
          }
        }
        location.reload();
      }
    });

    // Reset all progress
    function confirmResetAllProgress() {
      if (confirm('Are you sure you want to reset ALL student progress? This will remove all achievements from all students but keep the students themselves.')) {
        if (confirm('This action cannot be undone. Are you absolutely sure?')) {
          // Implementation would go here
          alert('Feature not yet implemented. Add this to your backend if needed.');
        }
      }
    }
    async function exportPINs() {
  if (!confirm('Export all plaintext PINs? This will download a JSON file containing sensitive data.')) return;

  try {
    const response = await fetch('/admin/export-pins');
    if (!response.ok) throw new Error('Failed to export PINs.');

    const data = await response.json();
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'plaintext-pins.json';
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  } catch (err) {
    alert('Error exporting PINs: ' + err.message);
  }
}

async function clearPINs() {
  if (!confirm('Are you sure you want to CLEAR all plaintext PINs? This cannot be undone.')) return;

  try {
    const response = await fetch('/admin/clear-pins', { method: 'POST' });
    if (!response.ok) throw new Error('Failed to clear PINs.');

    alert('Plaintext PINs cleared successfully.');
  } catch (err) {
    alert('Error clearing PINs: ' + err.message);
  }
}

  </script>
  
</body>
</html>